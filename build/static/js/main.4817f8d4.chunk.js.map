{"version":3,"sources":["services/phonebook.js","components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","person","post","id","put","delete","Filter","handler","value","onChange","PersonForm","props","nameHandler","name","phoneHandler","phone","onClick","addHandler","type","Persons","people","handleDelete","map","key","number","Notification","notification","className","message","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","searchTerm","setSearchTerm","setNotification","useEffect","phoneBook","initialData","createNotification","setTimeout","peopleToShow","filter","toLowerCase","includes","event","target","preventDefault","existingPerson","find","window","confirm","personObject","updatedPerson","newPerson","concat","catch","error","console","log","deletedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4817f8d4.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = '/api/persons';\n\nconst getAll = () => {\n  return axios.get(baseURL).then((response) => response.data);\n};\n\nconst createPerson = (person) => {\n  return axios.post(baseURL, person).then((response) => response.data);\n};\n\nconst updatePerson = (id, person) => {\n  return axios\n    .put(`${baseURL}/${id}`, person)\n    .then((response) => response.data);\n};\n\nconst deletePerson = (id) => {\n  return axios.delete(`${baseURL}/${id}`).then((response) => response.data);\n};\n\nexport default {\n  getAll,\n  createPerson,\n  updatePerson,\n  deletePerson,\n};\n","import React from 'react';\n\nconst Filter = ({ handler, value }) => {\n  return (\n    <div>\n      <div>\n        filter shown with\n        <input onChange={handler} value={value} />\n      </div>\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n  return (\n    <form>\n      <div>\n        name: <input onChange={props.nameHandler} value={props.name} />\n      </div>\n      <div>\n        number: <input onChange={props.phoneHandler} value={props.phone} />\n      </div>\n      <div>\n        <button onClick={props.addHandler} type=\"submit\">\n          add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Persons = ({ people, handleDelete }) => {\n  return (\n    <div>\n      {people.map((person) => (\n        <p key={person.name}>\n          {person.name} {person.number}{' '}\n          <button onClick={handleDelete(person)}>delete</button>\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from 'react';\n\nconst Notification = ({ notification }) => {\n  if (notification === null) {\n    return null;\n  }\n\n  return <div className={notification.type}>{notification.message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport phoneBook from './services/phonebook';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    phoneBook.getAll().then((initialData) => {\n      setPersons(initialData);\n    });\n  }, []);\n\n  const reset = () => {\n    setNewName('');\n    setNewNumber('');\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearchChange = (event) => {\n    setSearchTerm(event.target.value);\n  };\n\n  const handleAdd = (event) => {\n    event.preventDefault();\n\n    let existingPerson = persons.find(\n      (person) => person.name.toLowerCase() === newName.toLowerCase(),\n    );\n\n    if (existingPerson) {\n      // createNotification(`${newName} is already in the phonebook`, 'error');\n      const updatePerson = window.confirm(\n        `${newName} is already added to the phonebook, replace the old number with a new one?`,\n      );\n\n      if (updatePerson) {\n        const personObject = {\n          ...existingPerson,\n          number: newNumber,\n        };\n\n        phoneBook\n          .updatePerson(existingPerson.id, personObject)\n          .then((updatedPerson) => {\n            createNotification(\n              `Number of ${existingPerson.name} changed`,\n              'success',\n            );\n            setPersons(\n              persons.map((person) =>\n                person.id !== updatedPerson.id ? person : updatedPerson,\n              ),\n            );\n          });\n      }\n    } else {\n      const personObject = {\n        name: newName,\n        number: newNumber,\n      };\n      phoneBook\n        .createPerson(personObject)\n        .then((newPerson) => {\n          createNotification(`Added ${newName}`, 'success');\n          setPersons(persons.concat(newPerson));\n        })\n        .catch((error) => {\n          console.log(error);\n          createNotification(error.response.data.error, 'error');\n        });\n    }\n\n    reset();\n  };\n\n  const handleDelete = (deletedPerson) => () => {\n    const confirmDelete = window.confirm(`Delete ${deletedPerson.name}?`);\n    if (confirmDelete) {\n      phoneBook\n        .deletePerson(deletedPerson.id)\n        .then(() => {\n          createNotification(\n            `Information of ${deletedPerson.name} is successfully removed from server`,\n            'success',\n          );\n          setPersons(\n            persons.filter((person) => person.id !== deletedPerson.id),\n          );\n        })\n        .catch(() => {\n          createNotification(\n            `Information of ${deletedPerson.name} has already been removed from server`,\n            'error',\n          );\n          setPersons(\n            persons.filter((person) => person.id !== deletedPerson.id),\n          );\n        });\n    }\n  };\n\n  const createNotification = (message, type) => {\n    setNotification({ message, type });\n    setTimeout(() => {\n      setNotification(null);\n    }, 5000);\n  };\n\n  const peopleToShow = persons.filter((person) =>\n    person.name.toLowerCase().includes(searchTerm),\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notification={notification} />\n      <Filter handler={handleSearchChange} value={searchTerm} />\n      <h2>add a new</h2>\n      <PersonForm\n        nameHandler={handleNameChange}\n        name={newName}\n        phoneHandler={handlePhoneChange}\n        phone={newNumber}\n        addHandler={handleAdd}\n      />\n      <h2>Numbers</h2>\n      <Persons people={peopleToShow} handleDelete={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}